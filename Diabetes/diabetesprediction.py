# -*- coding: utf-8 -*-
"""DiabetesPrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hdQPS1jLggrAl8tdQY5qM4rps7S0-G71

# 1.Proje Açıklaması
### Proje Başlığı:
Diyabet Hastalığı Tahmini

### Projenin Amacı:
Bu projenin amacı, bireylerin çeşitli sağlık verileri kullanılarak Tip 2 diyabet hastalığına yakalanma riskini tahmin edebilen bir makine öğrenimi modeli geliştirmektir.

### Araştırma Sorusu:
Kişilerin sağlık verileri kullanılarak diyabet hastalığına yakalanıp yakalanmayacağı doğru bir şekilde tahmin edilebilir mi?

### Veri Seti Bilgileri:
Projede kullanılan veri seti, 100.000 bireye ait demografik ve sağlık verilerini içeren büyük ölçekli bir açık veri kümesidir. Veri seti çeşitli yaş gruplarından, cinsiyetlerden ve sağlık durumlarından bireyleri içermekte olup, daha genel ve temsili bir popülasyonu yansıtmaktadır.

gender: Bireyin cinsiyeti (Female, Male, Other)

age: Yaş (float)

hypertension: Yüksek tansiyon durumu (0 = Hayır, 1 = Evet)

heart_disease: Kalp hastalığı geçmişi (0 = Hayır, 1 = Evet)

smoking_history: Sigara içme geçmişi (No Info, never, current, former, etc.)

bmi: Vücut kitle indeksi (kg/m²)

HbA1c_level: Son 2-3 aylık ortalama kan şekeri seviyesini gösteren HbA1c değeri

blood_glucose_level: Anlık kan şekeri düzeyi

diabetes: Diyabet durumu (1 = Hasta, 0 = Sağlıklı)

# 2. 📦 Gerekli Kütüphanelerin Yüklenmesi
"""

# Temel Kütüphaneler
import numpy as np
import pandas as pd

# Görselleştirme
import matplotlib.pyplot as plt
import seaborn as sns

#Modelleme
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix,roc_auc_score, roc_curve
from sklearn.pipeline import Pipeline

#Ornekleme
from imblearn.over_sampling import SMOTE
from imblearn.under_sampling import RandomUnderSampler
from imblearn.pipeline import Pipeline as imbPipeline

#Decimal
pd.options.display.float_format = "{:.2f}".format

"""# 3. 📥 Verinin Yüklenmesi ve İlk İnceleme"""

# Google Colab'a dosya yükleme
from google.colab import files
uploaded = files.upload()


df = pd.read_csv("diabetes_prediction_dataset.csv")

df.head()

df.info()

df.describe()

df.isnull().sum()

"""# 4. 🔍 Keşifsel Veri Analizi (EDA)"""

duplicateData = df[df.duplicated()]
print("Tekrarlanan Veri Sayısı: ", duplicateData.shape)

df = df.drop_duplicates()

df.info()

#Benzersiz Değerlerin Sayısını Bulma

for column in df.columns:
  distinctValue=len(df[column].unique())
  print(f"{column} sütunun benzersiz değer sayısı: {distinctValue}")

#Eksik Değer Kontrolü
df.isnull().sum()

for column in df.columns:
  print(f"{column} sütunun değer sayıları:\n {df[column].value_counts()}")

#96146 veride 18 tane Other değeri var gürültü oluşturmaması için çıkarılıyor
df = df[df['gender'] != 'Other']

df.info()

#verileri formatlayıp okunaklı hale getirme
df.describe().style.format("{:.2f}")

# Age Dağılımı
plt.hist(df['age'], bins=30,edgecolor="black")
plt.title('Age Dagılım Grafiği')
plt.xlabel('Age')
plt.ylabel('Kişi Sayısı')
plt.show()

# Gender Dağılımı
sns.countplot(x='gender', data=df)
plt.title('Gender Dagılım Grafiği')
plt.ylabel('Kişi Sayısı')
plt.show()

# BMI Dağılımı
sns.histplot(df['bmi'], bins=30, kde=True)
plt.title("BMI Dağılım Grafiği")
plt.xlabel("BMI")
plt.ylabel("Kişi Sayısı")
plt.show()

#Hypertension Dağılımı
sns.countplot(x='hypertension', data=df)
plt.title('Hypertension Dağılım Grafiği')
plt.xlabel('Hypertension')
plt.ylabel('Kişi Sayısı')
plt.show()

#Heart Disease Dağılımı
sns.countplot(x='heart_disease', data=df)
plt.title('Heart Disease Dağılım Grafiği')
plt.xlabel('Heart Disease')
plt.ylabel('Kişi Sayısı')
plt.show()

#Diabetes  Dağılımı
sns.countplot(x='diabetes', data=df)
plt.title('Diabetes  Dağılım Grafiği')
plt.xlabel('Diabetes ')
plt.ylabel('Kişi Sayısı')
plt.show()

#Countplot Grafiği
sns.countplot(x='smoking_history', data=df)
plt.title('Smoking History Dağılım Grafiği')
plt.ylabel('Kişi Sayısı')
plt.show()

#İki Değişkenli Analiz
#İki değişkenli analiz, "hangi değişken hedefi etkiliyor?" ve "bu etki güçlü mü?" gibi sorulara cevap vererek modelinin daha isabetli ve anlaşılır olmasını sağlar.

#BMI vs Diabetes
sns.boxplot(x='diabetes', y='bmi', data=df)
plt.title('BMI vs Diabetes')
plt.show()

#Age vs Diabetes
sns.boxplot(x='diabetes', y='age', data=df)
plt.title('Age vs Diabetes')
plt.show()

#gender vs diabetes
sns.countplot(x='gender', hue='diabetes', data=df)
plt.title('Gender vs Diabetes')
plt.show()

#HbA1c level vs Diabetes
sns.boxplot(x='diabetes', y='HbA1c_level', data=df)
plt.title('HbA1c level vs Diabetes')
plt.show()

#Blood Glucose level vs Diabetes
sns.boxplot(x='diabetes', y='blood_glucose_level', data=df)
plt.title('Blood Glucose Level vs Diabetes')
plt.show()

#Heart Disease vs Diabetes
sns.countplot(x='heart_disease', hue='diabetes', data=df)
plt.title('Heart Disease vs Diabetes')
plt.show()

#Hypertension vs Diabetes
sns.countplot(x='hypertension', hue='diabetes', data=df)
plt.title('Hypertension vs Diabetes')
plt.show()

sns.pairplot(df, hue='diabetes')
plt.show()

"""# 5. 🔧 Veri Ön İşleme"""

# Smoking_History Sadeleştirme
def newSmoking(smokingStatus):
    if smokingStatus in ['never', 'No Info']:
        return 'non-smoker'
    elif smokingStatus == 'current':
        return 'current'
    elif smokingStatus in ['ever', 'former', 'not current']:
        return 'past_smoker'

# Smoking_History Güncelleme
df['smoking_history'] = df['smoking_history'].apply(newSmoking)

# Yeni Değerler
print(df['smoking_history'].value_counts())

data = df.copy()

#One Hot Encoding
def OHEncoding(df, columnName):
    #Yeni Sütunları Oluşturma
    dummies = pd.get_dummies(df[columnName], prefix=columnName)

    #Eski Sütunların Yerine Yeni Sütunları Getirme
    df = pd.concat([df.drop(columnName, axis=1), dummies], axis=1)
    return df

# One HOt Encoding Gendera uygulama
data = OHEncoding(data, 'gender')

# One HOt Encoding Smoking_History  uygulama
data = OHEncoding(data, 'smoking_history')

#Korelasyon Matrisi
corrMatrix = data.corr()
#Grafik 1
plt.figure(figsize=(15, 10))
sns.heatmap(corrMatrix, annot=True, cmap='coolwarm', linewidths=0.5, fmt='.2f')
plt.title("Correlation Matrix Heatmap")
plt.show()


#Grafik 2
corr = data.corr()
targetCorr = corr['diabetes'].drop('diabetes')

#Isı Haritasını Sıralama Azalan Şekilde
targetCorrSort = targetCorr.sort_values(ascending=False)

sns.set(font_scale=0.8)
sns.set_style("white")
sns.heatmap(targetCorrSort.to_frame(), cmap="coolwarm", annot=True, fmt='.2f')
plt.title('Diyabet Korelasyonu')
plt.show()

"""### Veri Dengesizliği Düzenleme"""

sns.countplot(x='diabetes', data=df)
plt.title('Diabetes Distribution')
plt.show()

df['diabetes'].value_counts()

#Ornekleme
over = SMOTE(sampling_strategy=0.1)
under = RandomUnderSampler(sampling_strategy=0.5)

#Veri Ön İşleme
preprocessor = ColumnTransformer(transformers=[
        ('num', StandardScaler(), ['age', 'bmi', 'HbA1c_level', 'blood_glucose_level','hypertension','heart_disease']),
        ('cat', OneHotEncoder(), ['gender','smoking_history'])
    ])

#Sütunları Ayırma
X = df.drop('diabetes', axis=1)
y = df['diabetes']

# Pipeline Oluşturma
pipe = imbPipeline(steps=[('preprocessor', preprocessor),
                      ('over', over),
                      ('under', under),
                      ('classifier', RandomForestClassifier())])

"""
# 7. 🤖 Model Seçimi ve Eğitimi"""

#Hiperparametre Oluşturm
param_grid = {
    'classifier__n_estimators': [50, 100, 200],
    'classifier__max_depth': [None, 10, 20],
    'classifier__min_samples_split': [2, 5, 10],
    'classifier__min_samples_leaf': [1, 2, 4]
}

# GridSearchCV Oluşturma
gridSearch = GridSearchCV(pipe, param_grid, cv=5)

# Train Test Setine ayırma
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train Modeli Oluşturma
gridSearch.fit(X_train, y_train)

# En İyi Parametre
print("En İyi Parametre: ", gridSearch.best_params_)

"""# 8. 📊 Model Değerlendirme"""

# GridSearchCv Df atama Ve Görselleştirme
resultsDf = pd.DataFrame(gridSearch.cv_results_)
plt.figure(figsize=(8, 6))
sns.lineplot(data=resultsDf, x='param_classifier__n_estimators', y='mean_test_score', hue='param_classifier__min_samples_split', palette='viridis')
plt.title('Hyperparameters Sonuçları')
plt.xlabel('Estimator Sayıları')
plt.ylabel('Ort Test Puanı')
plt.show()

# Test Kümesi üzerinden Tahminde bulunma
y_pred = gridSearch.predict(X_test)

# Model Değerlendirme

#Accuracy
print("Model Accuracy: ", accuracy_score(y_test, y_pred))

#Classification Report
print(classification_report(y_test, y_pred))#macro tüm sınıf weighted sınıf ortalaması

#ROC_AUC
y_probs = gridSearch.predict_proba(X_test)[:, 1]

roc_auc = roc_auc_score(y_test, y_probs)
print("ROC-AUC Score:", roc_auc)

fpr, tpr, thresholds = roc_curve(y_test, y_probs)

plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, label=f'ROC Curve (AUC = {roc_auc:.2f})')
plt.plot([0, 1], [0, 1], 'k--')  # rastgele tahmin çizgisi
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate (Recall)')
plt.title('ROC Curve')
plt.legend(loc='lower right')
plt.grid()
plt.show()



# Confusion matrix
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.title('Confusion Matrix')
plt.xlabel('Tahmin Edilen')
plt.ylabel('Gerçek')
plt.show()

print("Train Accuracy:", gridSearch.score(X_train, y_train))
print("Test Accuracy :", gridSearch.score(X_test, y_test))

"""# Verileri Kullanıcının girdiği"""

# Eğitilmiş model ve işlem hattını (pipeline) GridSearchCV'den alıyoruz
kullaniciModel = gridSearch.best_estimator_

# Kullanıcıdan girdi al
kullaniciGirdi = {
    'age': float(input("Yaşınızı girin: ")),
    'gender': input("Cinsiyetinizi girin (Male/Female): "),
    'hypertension': int(input("Hipertansiyon var mı? (1: Evet, 0: Hayır): ")),
    'heart_disease': int(input("Kalp hastalığı var mı? (1: Evet, 0: Hayır): ")),
    'smoking_history': input("Sigara geçmişi (non-smoker / past_smoker / current): "),
    'bmi': float(input("BMI: ")),
    'HbA1c_level': float(input("HbA1c seviyesi: ")),
    'blood_glucose_level': float(input("Kan şekeri seviyesi: "))
}

# Kullanıcı Girdileri DataFrame'e çevir
kullaniciDf = pd.DataFrame([kullaniciGirdi])

# Tahmin
pred = kullaniciModel.predict(kullaniciDf)[0]
proba = kullaniciModel.predict_proba(kullaniciDf)[0][1]

# Sonuç
if pred == 1:
    print(f"🔴 Tahmin: Diyabet hastasısınız. (Olasılık: %{proba*100:.2f})")
else:
    print(f"🟢 Tahmin: Diyabet hastası değilsiniz. (Olasılık: %{(1-proba)*100:.2f})")

"""# 9. 📝 Sonuç ve Yorumlar

Bu projede, diyabet hastalığını tahmin etmeye yönelik geliştirilen makine öğrenmesi modeli oldukça yüksek başarı göstermiştir. Elde edilen performans metrikleri, modelin hem genel doğruluğunun hem de hasta sınıfını ayırt edebilme gücünün yüksek olduğunu göstermektedir.

### Modelin Güçlü Yönleri:
**Yüksek Genel Doğruluk:**
Model, %94.84 doğruluk ile test verisinde güçlü bir performans sergilemiştir.

**Güçlü ROC-AUC Skoru:**
ROC-AUC değeri 0.9735 olup, modelin pozitif ve negatif sınıfları birbirinden ayırma başarısının çok yüksek olduğunu göstermektedir.

**İyi Recall :**
Diyabetli bireyler için recall oranı %80’dir. Bu, modelin gerçek hasta olan kişilerin %80’ini başarıyla tespit ettiğini göstermektedir — sağlık uygulamaları için kritik bir özelliktir.

**Dengeli F1-Score:**
Pozitif sınıfta f1-score = 0.73, negatif sınıfta f1-score = 0.97 olarak hesaplanmıştır. Bu da modelin hem doğruluk hem hassasiyet arasında iyi bir denge kurduğunu gösterir.

### Modelin Zayıf Yönleri:
**Pozitif Sınıf İçin Düşük Precision (0.68):**
Model, hasta olmayan bazı bireyleri yanlışlıkla “hasta” olarak tahmin etmiş olabilir (false positive). Bu durum, gereksiz tetkiklere veya kaynak kullanımına yol açabilir.

**Veri Dengesizliği:**
diabetes=1 sınıfı, veri setinde çok daha az sayıda örneğe sahiptir. SMOTE ve undersampling gibi yöntemlerle bu durum dengelenmiş olsa da, doğal dengesizlik modelin öğrenme sürecini etkilemiş olabilir.

**Tıbbi Verinin Belirsizliği:**
Gerçek dünyada tıbbi tanılar her zaman kesin olmayabilir. Özellikle "No Info" gibi kategorilerin non-smoker ile birleştirilmesi gibi veri temizleme adımları, potansiyel bilgi kaybı yaratabilir.

### Olası Hata Kaynakları:
Eksik ya da yanıltıcı veri (örneğin BMI uç değerleri)

Sigara geçmişi gibi metinsel verilerin yeniden sınıflandırılması

Veri setinin sınıflar arası dengesizliği

### Genel Değerlendirme:
Bu proje kapsamında geliştirilen model, diyabet hastalığının tahmini için oldukça başarılıdır. Özellikle gerçek pozitif hastaları yakalama oranı yüksek (recall = 0.80) olduğu için erken tanı açısından değerli bir araç olabilir. ROC-AUC değeri 0.97'nin üzerinde olan modeller genellikle yüksek ayrım gücüne sahip kabul edilir.
"""